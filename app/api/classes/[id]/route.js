// API pour r√©cup√©rer une classe sp√©cifique avec ses coefficients
import dbConnect from '../../lib/dbConnect';
import Classe from '../../_/models/ai/Classe';
import { NextResponse } from 'next/server';

export async function GET(request, { params }) {
  try {
    await dbConnect();
    
    const { id } = await params;
    console.log('üéì [API] R√©cup√©ration de la classe:', id);
    
    const classe = await Classe.findById(id);
    
    if (!classe) {
      console.log('‚ùå [API] Classe non trouv√©e:', id);
      return NextResponse.json({ 
        success: false, 
        error: 'Classe non trouv√©e' 
      }, { status: 404 });
    }
    
    console.log('‚úÖ [API] Classe trouv√©e:', {
      id: classe._id,
      niveau: classe.niveau,
      hasCoefficients: !!classe.coefficients,
      coefficientsKeys: Object.keys(classe.coefficients || {})
    });
    
    return NextResponse.json({
      success: true,
      data: {
        _id: classe._id,
        niveau: classe.niveau,
        annee: classe.annee,
        coefficients: classe.coefficients || {},
        // Inclure d'autres propri√©t√©s si n√©cessaire
        eleves: classe.eleves,
        professeur: classe.professeur
      }
    });
    
  } catch (error) {
    console.error('‚ùå [API] Erreur lors de la r√©cup√©ration de la classe:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Erreur serveur lors de la r√©cup√©ration de la classe' 
    }, { status: 500 });
  }
}

export async function PUT(request, { params }) {
  try {
    await dbConnect();
    
    const { id } = await params;
    const body = await request.json();
    
    console.log('üîÑ [API] D√©but mise √† jour classe:', id);
    console.log('üìä [API] Body re√ßu:', JSON.stringify(body, null, 2));
    console.log('üìä [API] Coefficients √† sauvegarder:', JSON.stringify(body.coefficients, null, 2));
    
    // V√©rifier que la classe existe d'abord
    const existingClasse = await Classe.findById(id);
    if (!existingClasse) {
      console.log('‚ùå [API] Classe non trouv√©e:', id);
      return NextResponse.json({ 
        success: false, 
        error: 'Classe non trouv√©e' 
      }, { status: 404 });
    }
    
    console.log('üìã [API] Classe trouv√©e, coefficients actuels:', existingClasse.coefficients);
    
    const updated = await Classe.findByIdAndUpdate(
      id, 
      { $set: { coefficients: body.coefficients } },
      { new: true, runValidators: true }
    );
    
    console.log('‚úÖ [API] Mise √† jour r√©ussie, nouveaux coefficients:', updated.coefficients);
    console.log('üîç [API] Classe compl√®te apr√®s mise √† jour:', JSON.stringify(updated, null, 2));
    
    // V√©rification suppl√©mentaire : relire la classe depuis la base
    const verification = await Classe.findById(id);
    console.log('üîç [API] V√©rification coefficients en base:', verification.coefficients);
    
    return NextResponse.json({
      success: true,
      data: {
        _id: updated._id,
        niveau: updated.niveau,
        coefficients: updated.coefficients
      }
    });
    
  } catch (error) {
    console.error('‚ùå [API] Erreur lors de la mise √† jour des coefficients:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Erreur serveur lors de la mise √† jour' 
    }, { status: 500 });
  }
}
