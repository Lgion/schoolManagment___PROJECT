import { NextResponse } from 'next/server';
import dbConnect from '../../lib/dbConnect';
const Subject = require('../../_/models/ai/Subject');

/**
 * POST /api/init/subjects
 * Route d'initialisation publique pour cr√©er les mati√®res par d√©faut
 * √Ä utiliser uniquement lors de la premi√®re configuration
 */
export async function POST(request) {
  try {
    await dbConnect();

    // V√©rifier si des mati√®res existent d√©j√†
    const existingSubjects = await Subject.countDocuments();
    if (existingSubjects > 0) {
      return NextResponse.json({
        success: false,
        error: `${existingSubjects} mati√®res existent d√©j√†. Base d√©j√† initialis√©e.`,
        count: existingSubjects
      }, { status: 400 });
    }

    // Mati√®res par d√©faut pour √©cole primaire fran√ßaise
    const defaultSubjects = [
      // Mati√®res g√©n√©rales (toutes classes)
      {
        nom: 'Math√©matiques',
        code: 'MATH',
        couleur: '#3498db',
        niveaux: false, // G√©n√©ral
        dureeDefaut: 60
      },
      {
        nom: 'Fran√ßais',
        code: 'FRAN',
        couleur: '#e74c3c',
        niveaux: false, // G√©n√©ral
        dureeDefaut: 60
      },
      {
        nom: 'Sciences et Technologie',
        code: 'SCI',
        couleur: '#2ecc71',
        niveaux: false, // G√©n√©ral
        dureeDefaut: 45
      },
      {
        nom: '√âducation Physique et Sportive',
        code: 'EPS',
        couleur: '#e67e22',
        niveaux: false, // G√©n√©ral
        dureeDefaut: 60
      },
      {
        nom: 'Arts Plastiques',
        code: 'ART',
        couleur: '#f1c40f',
        niveaux: false, // G√©n√©ral
        dureeDefaut: 45
      },
      {
        nom: '√âducation Musicale',
        code: 'MUS',
        couleur: '#8e44ad',
        niveaux: false, // G√©n√©ral
        dureeDefaut: 45
      },
      {
        nom: 'Calcul Mental',
        code: 'CALC',
        couleur: '#16a085',
        niveaux: false, // G√©n√©ral
        dureeDefaut: 15
      },
      {
        nom: '√âtude Dirig√©e',
        code: 'ETUD',
        couleur: '#2c3e50',
        niveaux: false, // G√©n√©ral
        dureeDefaut: 60
      },
      {
        nom: 'Enseignement Moral et Civique',
        code: 'EMC',
        couleur: '#9b59b6',
        niveaux: false, // G√©n√©ral
        dureeDefaut: 30
      },
      {
        nom: 'R√©cr√©ation',
        code: 'REC',
        couleur: '#f39c12',
        niveaux: false, // G√©n√©ral
        dureeDefaut: 15
      },
      
      // Mati√®res sp√©cifiques √† certains niveaux
      {
        nom: 'Histoire-G√©ographie',
        code: 'HIST',
        couleur: '#f39c12',
        niveaux: ['CE2', 'CM1', 'CM2'], // Sp√©cifique
        dureeDefaut: 45
      },
      {
        nom: 'Anglais',
        code: 'ANG',
        couleur: '#1abc9c',
        niveaux: ['CE1', 'CE2', 'CM1', 'CM2'], // Sp√©cifique
        dureeDefaut: 45
      },
      {
        nom: 'Lecture',
        code: 'LECT',
        couleur: '#95a5a6',
        niveaux: ['CP', 'CE1', 'CE2'], // Sp√©cifique
        dureeDefaut: 30
      },
      {
        nom: '√âcriture',
        code: 'ECR',
        couleur: '#7f8c8d',
        niveaux: ['CP', 'CE1', 'CE2'], // Sp√©cifique
        dureeDefaut: 30
      }
    ];

    // Debug : V√©rifier le sch√©ma du mod√®le
    console.log('üîç Sch√©ma Subject niveaux:', Subject.schema.paths.niveaux)
    console.log('üîç Premier sujet √† cr√©er:', JSON.stringify(defaultSubjects[0], null, 2))
    
    // Cr√©er les mati√®res une par une pour debug
    const createdSubjects = []
    for (const subjectData of defaultSubjects) {
      try {
        console.log(`üìù Cr√©ation de ${subjectData.nom} avec niveaux:`, subjectData.niveaux)
        const subject = new Subject(subjectData)
        await subject.validate() // Validation explicite
        const saved = await subject.save()
        createdSubjects.push(saved)
        console.log(`‚úÖ ${subjectData.nom} cr√©√© avec succ√®s`)
      } catch (err) {
        console.error(`‚ùå Erreur pour ${subjectData.nom}:`, err.message)
        throw err
      }
    }

    return NextResponse.json({
      success: true,
      data: createdSubjects,
      message: `üéâ Initialisation r√©ussie ! ${createdSubjects.length} mati√®res primaires cr√©√©es`,
      count: createdSubjects.length,
      subjects: createdSubjects.map(s => ({ nom: s.nom, code: s.code, niveaux: s.niveaux.length }))
    }, { status: 201 });

  } catch (error) {
    console.error('Erreur lors de l\'initialisation des mati√®res:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur serveur lors de l\'initialisation des mati√®res',
      details: error.message
    }, { status: 500 });
  }
}

/**
 * GET /api/init/subjects
 * V√©rifier l'√©tat d'initialisation (route publique)
 */
export async function GET(request) {
  try {
    await dbConnect();

    const existingCount = await Subject.countDocuments();
    const subjects = await Subject.find({}, 'nom code niveaux isActive').sort({ nom: 1 });

    return NextResponse.json({
      success: true,
      data: {
        isInitialized: existingCount > 0,
        subjectCount: existingCount,
        subjects: subjects.map(s => ({
          nom: s.nom,
          code: s.code,
          niveaux: s.niveaux.length,
          isActive: s.isActive
        }))
      },
      message: existingCount > 0 
        ? `Base initialis√©e avec ${existingCount} mati√®res` 
        : 'Base non initialis√©e - aucune mati√®re trouv√©e'
    });

  } catch (error) {
    console.error('Erreur lors de la v√©rification:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur serveur lors de la v√©rification',
      details: error.message
    }, { status: 500 });
  }
}
