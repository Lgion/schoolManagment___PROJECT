'use client';

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

// Contexte pour gÃ©rer l'Ã©tat de loading global
const LoadingContext = createContext();

export const LoadingProvider = ({ children }) => {
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  useEffect(() => {
    // Dans Next.js 13+ App Router, les router events ne sont plus disponibles
    // La logique de loading sera gÃ©rÃ©e manuellement via les clics interceptÃ©s
    console.log('ðŸ”„ LoadingProvider initialisÃ© - gestion manuelle du loading');
  }, [router]);

  // Fonction pour dÃ©clencher le loading manuellement
  const startLoading = () => setIsLoading(true);
  const stopLoading = () => setIsLoading(false);

  const value = {
    isLoading,
    startLoading,
    stopLoading,
    setIsLoading
  };

  return (
    <LoadingContext.Provider value={value}>
      {children}
    </LoadingContext.Provider>
  );
};

// Hook personnalisÃ© pour utiliser le contexte de loading
export const useLoading = () => {
  const context = useContext(LoadingContext);
  if (!context) {
    throw new Error('useLoading doit Ãªtre utilisÃ© dans un LoadingProvider');
  }
  return context;
};
